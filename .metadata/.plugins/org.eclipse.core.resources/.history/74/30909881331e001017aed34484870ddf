#include "main.h"

//LCD SPI clock =   PQ0
//LCD SPI CS    =   PP3
//LCD SPI MOSI  =   PQ2
//LCD reset     =
//LCD RS        =   PK7
void LCD_init()
{
    //Initialize SSI Module 3. LCD is connected to this.
    (*((volatile uint32_t *)(RCGCSSI))) |= (1 << 3);

    gpio_port_init(PORTK | PORTP | PORTQ);

    //Set PQ0 & PQ2 as digital.
    (*((volatile uint32_t *)(GPIOPORTQ + GPIODEN))) |= ((1 << 0) | (1 << 2));

    //Set PQ0 & PQ2 to use their alternate function.
    (*((volatile uint32_t *)(GPIOPORTQ + GPIOAFSEL))) |= ((1 << 0) | (1 << 2));

    //Set PQ0 & PQ2 to use SSI3 as their alternate function. This is option 14.
    uint32_t mask = 0xFFFFF0F0;
    uint32_t current = (*((volatile uint32_t *)(GPIOPORTQ + GPIOPCTL)));
    current &= mask;
    current |= 0x00000E0E;
    (*((volatile uint32_t *)(GPIOPORTQ + GPIOPCTL))) = current;

    //Set PP3 as digital.
    (*((volatile uint32_t *)(GPIOPORTP + GPIODEN))) |= ((1 << 3));

    //Set PP3 as output.
    (*((volatile uint32_t *)(GPIOPORTP + GPIODIR))) |= ((1 << 3));

    //Unsure if this is necessary here. I did this for the LCD on the daughterboard.
    unlatch_CS_LCD();

    //Set PK7 as digital.
    (*((volatile uint32_t *)(GPIOPORTK + GPIODEN))) |= ((1 << 7));

    //Set PK7 as output.
    (*((volatile uint32_t *)(GPIOPORTK + GPIODIR))) |= ((1 << 3));

    //Disable SSI Module 3 and set it to Master.
    (*((volatile uint32_t *)(SSI3 + SSICR1))) &= ~(3 << 1);

    //Set the SSI clock source to be the PIOSC.
    (*((volatile uint32_t *)(SSI3 + SSICC))) |= 0x5;

    //The Tiva clock runs at 120 MHz. The LCD supports up to 20 FPS. Set divisor to 15 to get 8 MHz.

}

void unlatch_CS_LCD()
{
    (*((volatile uint32_t *)(GPIOPORTP + GPIODATA))) &= ~(1 << 3);
}
